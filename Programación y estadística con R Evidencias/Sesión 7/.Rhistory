sd(media1500.67)
#Compare la media muestral encontrada en el paso anterior con la media real (1/5) de la población de la cual provienen las muestras
mean(media1500.67); 1/5
#Compare la desviación estándar muestral encontrada con la desviación estándar real (1/5) de la población de la cual provienen las muestras pero dividida por 67 (el tamaño de las muestras)
sd(media1500.67); (1/5)/sqrt(67) # DE de las 1200 medias y DE de la población de la cual provienen las 1200 muestras dividida por la raíz del tamaño de las muestras
install.packages(TSA)
install.packages("TSA")
install.packages("DBI")
install.packages("RMySQL")
install.packages("pool")
install.packages("rvest")
####Reto2
#Ahora es momento de realizar la extracción de una tabla desde un html, realiza este reto desde tu RStudio Desktop.
#
#De la siguiente dirección donde se muestran los sueldos para Data Scientist
#
#(https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm), realiza las siguientes acciones:
#
#  Extraer la tabla del HTML
library(rvest)
theurl <- "https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm"
install.packages("xml2")
install.packages("xml2")
####Reto2
#Ahora es momento de realizar la extracción de una tabla desde un html, realiza este reto desde tu RStudio Desktop.
#
#De la siguiente dirección donde se muestran los sueldos para Data Scientist
#
#(https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm), realiza las siguientes acciones:
#
#  Extraer la tabla del HTML
library(rvest)
library(xml2)
####Reto2
#Ahora es momento de realizar la extracción de una tabla desde un html, realiza este reto desde tu RStudio Desktop.
#
#De la siguiente dirección donde se muestran los sueldos para Data Scientist
#
#(https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm), realiza las siguientes acciones:
#
#  Extraer la tabla del HTML
library(rvest)
theurl <- "https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm"
file<-read_html(theurl)
tables<-html_nodes(file, "table")
View(tables)
View(tables)
table1 <- html_table(tables[1], fill = TRUE)
View(table1)
View(table1)
table1 <- html_table(tables[[1]], fill = TRUE)
View(table1)
View(table1)
str(table1)
#Quitar los caracteres no necesarios de la columna sueldos (todo lo que no sea número), para dejar solamente la cantidad mensual
table <- na.omit(as.data.frame(table1))
table$Sueldo <- as.numeric(table$Sueldo)
str(table)
install.packages("tidyr")
extract_numeric(table$Sueldo)
library(tidyr)
extract_numeric(table$Sueldo)
table1 <- html_table(tables[[1]], fill = TRUE)
#Quitar los caracteres no necesarios de la columna sueldos (todo lo que no sea número), para dejar solamente la cantidad mensual
table <- na.omit(as.data.frame(table1))
extract_numeric(table$Sueldo)
library(readr)
install.packages("readr")
install.packages("readr")
install.packages("readr")
library(readr)
parse_number(table$Sueldo)
table$Sueldo<-parse_number(table$Sueldo)
table$Sueldo <- as.numeric(table$Sueldo)
str(table)
#
#Ahora podrás responder esta pregunta ¿Cuál es la empresa que más paga y la que menos paga?
max(table$Sueldo)
View(table)
table[mas_paga,]
#
#Ahora podrás responder esta pregunta ¿Cuál es la empresa que más paga y la que menos paga?
mas_paga<-which.max(table$Sueldo)
table[mas_paga,]
filter(tabel, Sueldo==mas_paga)
filter(table, Sueldo==mas_paga)
#
#Asignar ésta columna como tipo numérico para poder realizar operaciones con ella
table$Sueldo <- as.numeric(table$Sueldo)
str(table)
filter(table, Sueldo==mas_paga)
filter(table, table$Sueldo==mas_paga)
table[,mas_paga]
table[menos_paga,]
menos_paga<-which.min(table$Sueldo)
table[mas_paga,]
table[menos_paga,]
View(table1)
tables
View(table1)
View(tables)
####Reto2
#Ahora es momento de realizar la extracción de una tabla desde un html, realiza este reto desde tu RStudio Desktop.
#
#De la siguiente dirección donde se muestran los sueldos para Data Scientist
#
#(https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm), realiza las siguientes acciones:
#
#  Extraer la tabla del HTML
library(rvest)
theurl <- "https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm"
file<-read_html(theurl)
tables<-html_nodes(file, "table")
table1 <- html_table(tables[[1]], fill = TRUE)
str(table1)
####Reto2
#Ahora es momento de realizar la extracción de una tabla desde un html, realiza este reto desde tu RStudio Desktop.
#
#De la siguiente dirección donde se muestran los sueldos para Data Scientist
#
#(https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm), realiza las siguientes acciones:
#
#  Extraer la tabla del HTML
library(rvest)
theurl <- "https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm"
file<-read_html(theurl)
tables<-html_nodes(file, "table")
table1 <- html_table(tables[[1]], fill = TRUE)
str(table1)
#Quitar los caracteres no necesarios de la columna sueldos (todo lo que no sea número), para dejar solamente la cantidad mensual
table <- na.omit(as.data.frame(table1))
table$Sueldo<-parse_number(table$Sueldo)
table$Sueldo<-parse_number(table$Sueldo)
table$Sueldo<-parse_number(table$Sueldo)
theurl <- "https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm"
file<-read_html(theurl)
tables<-html_nodes(file, "table")
####Reto2
#Ahora es momento de realizar la extracción de una tabla desde un html, realiza este reto desde tu RStudio Desktop.
#
#De la siguiente dirección donde se muestran los sueldos para Data Scientist
#
#(https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm), realiza las siguientes acciones:
#
#  Extraer la tabla del HTML
library(rvest)
library(xml2)
theurl <- "https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm"
file<-read_html(theurl)
tables<-html_nodes(file, "table")
table1 <- html_table(tables[[1]], fill = TRUE)
str(table1)
#Quitar los caracteres no necesarios de la columna sueldos (todo lo que no sea número), para dejar solamente la cantidad mensual
table <- na.omit(as.data.frame(table1))
table$Sueldo<-parse_number(table$Sueldo)
#
#Asignar ésta columna como tipo numérico para poder realizar operaciones con ella
table$Sueldo <- as.numeric(table$Sueldo)
str(table)
tables<-html_nodes(file, "table")
table1 <- html_table(tables[[1]], fill = TRUE)
str(table1)
#Quitar los caracteres no necesarios de la columna sueldos (todo lo que no sea número), para dejar solamente la cantidad mensual
table <- na.omit(as.data.frame(table1))
gsub("MXN$","",table$Sueldo)
lapply(table$Sueldo, gsub("MXN$","",table$Sueldo))
gsub("MXN$","",table$Sueldo[1,])
gsub("MXN$","",table$Sueldo[,1])
paste(i)
for (i in table$Sueldo) {
paste(i)
}
library(readr)
table$Sueldo<-parse_number(table$Sueldo)
table$Sueldo
table[i,]
for (i in table$Sueldo) {
table[i,]
}
tables<-html_nodes(file, "table")
table1 <- html_table(tables[[1]], fill = TRUE)
str(table1)
lapply(table, function(x) as.numeric(gsub("[MXN$,]", "", x)))
theurl <- "https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm"
file<-read_html(theurl)
tables<-html_nodes(file, "table")
table1 <- html_table(tables[[1]], fill = TRUE)
str(table1)
#Quitar los caracteres no necesarios de la columna sueldos (todo lo que no sea número), para dejar solamente la cantidad mensual
table <- na.omit(as.data.frame(table1))
lapply(table, function(x) as.numeric(gsub("[MXN$,]", "", x)))
lapply(table$Sueldo, function(x) as.numeric(gsub("[MXN$,]", "", x)))
lapply(table$Sueldo, gsub, pattern = "MXN$", replacement = "")
lapply(table$Sueldo, gsub, pattern = "MXN\\$", replacement = "")
library(datasets)
read.csv("match.data.csv")
library(help = "datasets")
library(help = "datasets")
## app.R ##
## Dash board para el data set 'mtcars'
library(shiny)
library(shinydashboard)
#install.packages("shinythemes")
library(shinythemes)
#Esta parte es el análogo al ui.R
ui <-
fluidPage(
dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Histograma", tabName = "Dashboard", icon = icon("dashboard")),
menuItem("Dispersión", tabName = "graph", icon = icon("area-chart")),
menuItem("Data Table", tabName = "data_table", icon = icon("table")),
menuItem("Imágen", tabName = "img", icon = icon("file-picture-o"))
)
),
dashboardBody(
tabItems(
# Histograma
tabItem(tabName = "Dashboard",
fluidRow(
titlePanel("Histograma de las variables del data set mtcars"),
selectInput("x", "Seleccione el valor de X",
choices = names(mtcars)),
selectInput("zz", "Selecciona la variable del grid",
choices = c("cyl", "vs", "gear", "carb")),
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("bins", "Number of observations:", 1, 30, 15)
)
)
),
# Dispersión
tabItem(tabName = "graph",
fluidRow(
titlePanel(h3("Gráficos de dispersión")),
selectInput("a", "Selecciona el valor de x",
choices = names(mtcars)),
selectInput("y", "Seleccione el valor de y",
choices = names(mtcars)),
selectInput("z", "Selecciona la variable del grid",
choices = c("cyl", "vs", "gear", "carb")),
box(plotOutput("output_plot", height = 300, width = 460) )
)
),
tabItem(tabName = "data_table",
fluidRow(
titlePanel(h3("Data Table")),
dataTableOutput ("data_table")
)
),
tabItem(tabName = "img",
fluidRow(
titlePanel(h3("Imágen de calor para la correlación de las variables")),
img( src = "cor_mtcars.png",
height = 350, width = 350)
)
)
)
)
)
)
#De aquí en adelante es la parte que corresponde al server
server <- function(input, output) {
library(ggplot2)
#Gráfico de Histograma
output$plot1 <- renderPlot({
x <- mtcars[,input$x]
bin <- seq(min(x), max(x), length.out = input$bins + 1)
ggplot(mtcars, aes(x, fill = mtcars[,input$zz])) +
geom_histogram( breaks = bin) +
labs( xlim = c(0, max(x))) +
theme_light() +
xlab(input$x) + ylab("Frecuencia") +
facet_grid(input$zz)
})
# Gráficas de dispersión
output$output_plot <- renderPlot({
ggplot(mtcars, aes(x =  mtcars[,input$a] , y = mtcars[,input$y],
colour = mtcars[,input$z] )) +
geom_point() +
ylab(input$y) +
xlab(input$x) +
theme_linedraw() +
facet_grid(input$z)  #selección del grid
})
#Data Table
output$data_table <- renderDataTable( {mtcars},
options = list(aLengthMenu = c(5,25,50),
iDisplayLength = 5)
)
}
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny)
install.packages("shiny")
library(shiny)
library(shinydashboard)
install.packages("shinydashboard")
install.packages("shinythemes")
#install.packages("shinythemes")
library(shinythemes)
library(shinydashboard)
ui <-
fluidPage(
dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(
sidebarMenu(
menuItem("Histograma", tabName = "Dashboard", icon = icon("dashboard")),
menuItem("Dispersión", tabName = "graph", icon = icon("area-chart")),
menuItem("Data Table", tabName = "data_table", icon = icon("table")),
menuItem("Imágen", tabName = "img", icon = icon("file-picture-o"))
)
),
dashboardBody(
tabItems(
# Histograma
tabItem(tabName = "Dashboard",
fluidRow(
titlePanel("Histograma de las variables del data set mtcars"),
selectInput("x", "Seleccione el valor de X",
choices = names(mtcars)),
selectInput("zz", "Selecciona la variable del grid",
choices = c("cyl", "vs", "gear", "carb")),
box(plotOutput("plot1", height = 250)),
box(
title = "Controls",
sliderInput("bins", "Number of observations:", 1, 30, 15)
)
)
),
# Dispersión
tabItem(tabName = "graph",
fluidRow(
titlePanel(h3("Gráficos de dispersión")),
selectInput("a", "Selecciona el valor de x",
choices = names(mtcars)),
selectInput("y", "Seleccione el valor de y",
choices = names(mtcars)),
selectInput("z", "Selecciona la variable del grid",
choices = c("cyl", "vs", "gear", "carb")),
box(plotOutput("output_plot", height = 300, width = 460) )
)
),
tabItem(tabName = "data_table",
fluidRow(
titlePanel(h3("Data Table")),
dataTableOutput ("data_table")
)
),
tabItem(tabName = "img",
fluidRow(
titlePanel(h3("Imágen de calor para la correlación de las variables")),
img( src = "cor_mtcars.png",
height = 350, width = 350)
)
)
)
)
)
)
#De aquí en adelante es la parte que corresponde al server
server <- function(input, output) {
library(ggplot2)
#Gráfico de Histograma
output$plot1 <- renderPlot({
x <- mtcars[,input$x]
bin <- seq(min(x), max(x), length.out = input$bins + 1)
ggplot(mtcars, aes(x, fill = mtcars[,input$zz])) +
geom_histogram( breaks = bin) +
labs( xlim = c(0, max(x))) +
theme_light() +
xlab(input$x) + ylab("Frecuencia") +
facet_grid(input$zz)
})
# Gráficas de dispersión
output$output_plot <- renderPlot({
ggplot(mtcars, aes(x =  mtcars[,input$a] , y = mtcars[,input$y],
colour = mtcars[,input$z] )) +
geom_point() +
ylab(input$y) +
xlab(input$x) +
theme_linedraw() +
facet_grid(input$z)  #selección del grid
})
#Data Table
output$data_table <- renderDataTable( {mtcars},
options = list(aLengthMenu = c(5,25,50),
iDisplayLength = 5)
)
}
shinyApp(ui, server)
library(mongolite)
install.packages("mongolite")
library(mongolite)
m <- mongo("match_games", url = "mongodb+srv://bedu_p7:NEC@cluster0.wogir.mongodb.net/")
View(m)
m <- mongo("match_games", url = "mongodb+srv://bedu_p7:NEC@cluster0.wogir.mongodb.net/match_games")
View(m)
con <- mongo("mtcars", url =
"mongodb+srv://readwrite:test@cluster0-84vdt.mongodb.net/test")
View(con)
mydata <- con$find()
View(mydata)
alldata <- con$find('{}')
print(alldata)
alldata <- m$find('{}')
print(alldata)
m <- mongo("match", url = "mongodb+srv://bedu_p7:NEC@cluster0.wogir.mongodb.net/match_games")
alldata <- m$find('{}')
print(alldata)
m$count('{}')
rm(m)
gc()
m$find(
query = '{"Date": { "$gte" : { "$date" : "2017-01-01T00:00:00Z" }}}'
)
m <- mongo("match", url = "mongodb+srv://bedu_p7:NEC@cluster0.wogir.mongodb.net/match_games")
alldata <- m$find('{}')
print(alldata)
m$count('{}')
m$find(
query = '{"Date": { "$gte" : { "$date" : "2017-01-01T00:00:00Z" }}}'
)
m$find(
query = '{"Date": { "$gte" : { "$date" : "2015-12-20" }}}'
)
m$find(
query = '{"Date": { "$gte" : { "$date" : "2015-12-20T00:00:00Z" }}}'
)
m$find(
query = '{"Date": { "$date" : "2015-12-20T00:00:00Z" }}'
)
m$find(
query = '{"Date":  {"$gt" : new ISODate("2015-01-01")}}'
)
m$find(
query = '{"Date":  {"$gt":{"$date":"2015-01-01T00:00:00Z"}}}'
)
m$find(
query = '{"Date":  {"$gt":{"$date":"2015-12-20T00:00:00Z"}}}'
)
issues$find(
query = '{"Date": { "$gte" : { "$date" : "2015-01-20T00:00:00Z" }}}'
)
m$find(
query = '{"Date": { "$gte" : { "$date" : "2015-01-20T00:00:00Z" }}}'
)
alldata$find(
query = '{"Date": { "$gte" : { "$date" : "2015-01-20T00:00:00Z" }}}'
)
m$find(
query = '{"Date": { "$gte" : { "$date" : "2015-01-20T00:00:00Z" }}}'
)
m$find(
query = '{"HobeTeam": Leganes}'
)
m$find(
query = '{"HobeTeam": "Leganes"}'
)
m$find(
query = '{"HomeTeam": "Leganes"}'
)
m$find(
query = '{"HomeTeam": "2015-01-20"}'
)
m$find(
query = '{"Date": "2015-01-20"}'
)
rm(m)
m <- mongo("match", url = "mongodb+srv://bedu_p7:NEC@cluster0.wogir.mongodb.net/match_games")
alldata <- m$find('{}')
print(alldata)
m$count('{}')
m$find(
query = '{"Date": "2015-01-20"}'
)
m$find(
query = '{"Date": "2015-12-20"}'
)
m$find(
query = '{"Date": "2015-20-12"}'
)
m$find(
query = '{"Date": "2017-12-22"}'
)
m$find(
query = '{"Date": "2015-12-20"}'
)
m$find(
query = '{"Date": "2015-12-20", "HomeTeam": "Real Madrid"}'
)
m$find(
query = '{"HomeTeam": "Real Madrid"}'
)
c<-m$find(
query = '{"HomeTeam": "Real Madrid"}'
)
paste("La cantidad de registros son:",Cantidad)
##
Cantidad<-m$count('{}')
paste("La cantidad de registros son:",Cantidad)
m$find(
query = '{"Date": "2020-07-02","HomeTeam": "Real Madrid"}'
)
library(dplyr)
setwd("D:documentos/Santander bedu/Fase 2/Repositorio/Evidencia/Programación y estadística con R Evidencias/Sesión 7")
T15_16<-read.csv("/Postwork/data/SP1_15-16.csv")
setwd("D:documentos/Santander bedu/Fase 2/Repositorio/Evidencia/Programación y estadística con R Evidencias/Sesión 7/Postwork")
